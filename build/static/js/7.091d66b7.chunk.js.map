{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.091d66b7.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react'\n\nimport './Map.css'\n\nconst Map = props => {\n    const mapRef = useRef()\n\n    const { center, zoom } = props\n\n    useEffect(()=> {\n        const map = new window.google.maps.Map(mapRef.current, {\n            center: center,\n            zoom: zoom\n        })\n    \n        new window.google.maps.Marker({position: center, map: map})\n    }, [center, zoom])\n\n   \n\n    return <div ref={mapRef} className={`map ${props.className}`} style={props.style}></div>\n}\n\nexport default Map","import React, { useState, useContext } from 'react'\n\nimport './PlaceItem.css'\nimport Card from \"../../shared/components/UIElements/Card\"\nimport Button from \"../../shared/components/FormElements/Button\"\nimport Modal from \"../../shared/components/UIElements/Modal\"\nimport Map from \"../../shared/components/UIElements/Map\"\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\nimport { AuthContext } from '../../shared/context/auth-context'\nimport { useHttpClient } from '../../shared/hooks/http-hook'\n\nconst PlaceItem = props => {\n    const { isLoading, error, sendRequest, clearError} = useHttpClient()\n    const auth = useContext(AuthContext)\n\n    const [showMap, setShowMap] = useState(false)\n\n    const [showConfirmModal, setShowConfirmModal] = useState(false)\n\n    const openMapHandler = () => setShowMap(true)\n\n    const closeMapHandler = () => setShowMap(false)\n\n    const showDeleteWarningHandler = () => {\n        setShowConfirmModal(true)\n    }\n\n    const cancelDeleteHandler = () => {\n        setShowConfirmModal(false)\n    }\n    const confirmDeleteHandler = async () => {\n        setShowConfirmModal(false)\n        try {\n            await sendRequest(process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`,\n            'DELETE',\n            null,\n            {\n                Authorization: 'Bearer ' + auth.token\n            })\n            props.onDelete(props.id)\n        } catch (err) {}\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError}/>\n            <Modal \n            show={showMap} \n            onCancel={closeMapHandler} \n            header={props.address} \n            contentClass=\"place-item__modal-contet\" \n            footerClass=\"place-item__modals-actions\" \n            footer={<Button onClick={closeMapHandler}>Close</Button>} \n            >\n                <div className=\"map-container\">\n                    <Map center={props.coordinates} zoom={16}/>\n                </div>\n            </Modal>\n            <Modal\n            show={showConfirmModal}\n            onCancel={cancelDeleteHandler}\n            header=\"Are you sure?\"\n            footerClass=\"place-item__modal-actions\"\n            footer={\n                <React.Fragment>\n                    <Button onClick={cancelDeleteHandler} inverse>CANCEL</Button>\n                    <Button onClick={confirmDeleteHandler} danger>DELETE</Button>\n                </React.Fragment>\n            }\n            >\n                <p>\n                    Do you want to proceed and delete place? Please note it can not be undone thereafter.\n                </p>\n            </Modal>\n        <li className=\"place-item\">\n            <Card className=\"place-item__content\">\n                {isLoading && <LoadingSpinner asOverlay/>}\n                <div className=\"place-item__image\">\n                    <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\n                </div>\n                <div className=\"place-item__info\">\n                    <h2>{props.title}</h2>\n                    <h3>{props.address}</h3>\n                    <p>{props.description}</p>\n                </div>\n                <div className=\"place-item__actions\">\n                    <Button inverse onClick={openMapHandler}>View On Map</Button>\n                    {auth.userId === props.creatorId && <Button to={`/places/${props.id}`}>Edit</Button>}\n                    {auth.userId === props.creatorId && <Button onClick={showDeleteWarningHandler} danger>Delete</Button>}\n                    \n                </div>\n            </Card>\n        </li>\n        </React.Fragment>\n    )\n}\n\nexport default PlaceItem","import React from 'react'\n\nimport './PlaceList.css'\nimport Card from '../../shared/components/UIElements/Card'\nimport PlaceItem from './PlaceItem'\nimport Button from '../../shared/components/FormElements/Button'\n\nconst PlaceList = props => {\n    if (props.items.length === 0) {\n        return ( \n        <div className=\"place-list center\">\n            <Card>\n                <h2>No places found. Maybe create one?</h2>\n                <Button to=\"/places/new\">Share Place</Button>\n            </Card>\n        </div>\n        )\n    }\n    return (\n        <ul className=\"place-list\">\n            {props.items.map(place => (\n            <PlaceItem \n            key={place.id} \n            id={place.id} \n            image={place.image} \n            title={place.title} \n            description={place.description} \n            address={place.address}\n            creatorId={place.creator}\n            coordinates={place.location}\n            onDelete={props.onDeletePlace}\n             />\n             ))}\n        </ul>\n    )\n}\n\nexport default PlaceList","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport PlaceList from '../components/PlaceList'\nimport { useHttpClient } from '../../shared/hooks/http-hook'\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\n\nconst UserPlaces = () => {\n    const [loadedPlaces, setLoadedPlaces] = useState()\n    const { isLoading, error, sendRequest, clearError} = useHttpClient()\n    const userId = useParams().userId;\n    useEffect(() => {\n        const fetchPlaces = async() => {\n            try{\n                const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`)\n                setLoadedPlaces(responseData.places)\n            } catch (err) {\n\n            }        \n        }\n        fetchPlaces()\n    }, [sendRequest, userId])\n\n    const placeDeleteHandler = (deletedPlaceId) => {\n        setLoadedPlaces(prevPlaces => prevPlaces.filter(place=> place.id !== deletedPlaceId))\n    }\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError}/>\n            {isLoading && \n            <div className=\"center\">\n            <LoadingSpinner/>\n            </div>\n            }   \n            {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeleteHandler}/>}\n        </React.Fragment>\n    )\n}\n\nexport default UserPlaces"],"sourceRoot":""}